require 'rails_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.

RSpec.describe EmployeesController, :type => :controller do

#   # This should return the minimal set of attributes required to create a valid
#   # Employee. As you add validations to Employee, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) {
#     skip("Add a hash of attributes valid for your model")
#   }

#   let(:invalid_attributes) {
#     skip("Add a hash of attributes invalid for your model")
#   }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # EmployeesController. Be sure to keep this updated too.
#   let(:valid_session) { {} }
  describe 'vote' do
    before(:each) do
      sign_in FactoryGirl.create(:user)
    end
    it 'should be successful' do
      employee = FactoryGirl.create(:employee)
      get :vote, :id=>1,:direction=>"like"
      expect(response).to redirect_to(action: :index)
    end
    it 'should not be successful' do
      employee = FactoryGirl.create(:employee)
      expect { get :vote, :id=>1,:direction=>"what"
        }.to raise_error
    end
  end

#   describe "GET show" do
#     it "assigns the requested employee as @employee" do
#       employee = Employee.create! valid_attributes
#       get :show, {:id => employee.to_param}, valid_session
#       expect(assigns(:employee)).to eq(employee)
#     end
#   end

#   describe "GET new" do
#     it "assigns a new employee as @employee" do
#       get :new, {}, valid_session
#       expect(assigns(:employee)).to be_a_new(Employee)
#     end
#   end

#   describe "GET edit" do
#     it "assigns the requested employee as @employee" do
#       employee = Employee.create! valid_attributes
#       get :edit, {:id => employee.to_param}, valid_session
#       expect(assigns(:employee)).to eq(employee)
#     end
#   end

  describe "POST create" do
    describe "with valid params" do
      before(:each) do
        sign_in FactoryGirl.create(:user)
      end
      it "creates a new Employee" do
        expect {
          post :create, :employee => {:email=> 'user@example.com', :username=> 'user1', :first_name=>'F',:last_name=>'L', :id=>1, :password=>'12345678',:phone => 1234567898, :zipcode=>94704}
        }.to change(Employee, :count).by(1)
      end

      # it "assigns a newly created employee as @employee" do
      #   post :create, :employee => {:employee_email=> 'user@example.com', :username=> 'user1', :employee_first_name=>'F',:employee_last_name=>'L', :id=>1, :password=>'12345678',:employee_phone => 1234567898, :employee_zipcode=>94704}
      #   expect(assigns(:employee)).to be_a(Employee)
      #   expect(assigns(:employee)).to be_persisted
      # end

      it "redirects to the created employee" do
        post :create, :employee => {:email=> 'user@example.com', :username=> 'user1', :first_name=>'F',:last_name=>'L', :id=>1, :password=>'12345678',:phone => 1234567898, :zipcode=>94704}
        expect(response).to redirect_to(Employee.last)
      end
    end

    describe "with invalid params" do
      before(:each) do
        sign_in FactoryGirl.create(:user)
      end
      # it "assigns a newly created but unsaved employee as @employee" do
      #   post :create, {:employee => invalid_attributes}, valid_session
      #   expect(assigns(:employee)).to be_a_new(Employee)
      # end

      it "re-renders the 'new' template" do
        post :create, :employee => {:email=> 'user', :username=> 'user1', :first_name=>'F',:last_name=>'L', :id=>1, :password=>'12345678',:phone => 1234567898, :zipcode=>94704}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      # let(:new_attributes) {
      #   skip("Add a hash of attributes valid for your model")
      # }
      before(:each) do
        sign_in FactoryGirl.create(:user)
      end
      it "updates the requested employee" do
        employee = FactoryGirl.create(:employee)
        put :update, {:id => 1, :employee => {:email=> 'user@example.com', :username=> 'user1', :first_name=>'F',:last_name=>'L', :id=>1, :password=>'12345678',:phone => 1234567898, :zipcode=>94704}}
        employee.reload
        expect(employee.email).to eq('user@example.com')
      end

      # it "assigns the requested employee as @employee" do
      #   employee = Employee.create! valid_attributes
      #   put :update, {:id => employee.to_param, :employee => valid_attributes}, valid_session
      #   expect(assigns(:employee)).to eq(employee)
      # end

      it "redirects to the employee" do
        employee = FactoryGirl.create(:employee)
        put :update, {:id => 1, :employee => {:email=> 'user@example.com', :username=> 'user1', :first_name=>'F',:last_name=>'L', :id=>1, :password=>'12345678',:phone => 1234567898, :zipcode=>94704}}
        expect(response).to redirect_to(employee)
      end
    end

    describe "with invalid params" do
      before(:each) do
        sign_in FactoryGirl.create(:user)
      end
      # it "assigns the employee as @employee" do
      #   employee = Employee.create! valid_attributes
      #   put :update, {:id => employee.to_param, :employee => invalid_attributes}, valid_session
      #   expect(assigns(:employee)).to eq(employee)
      # end
      it "re-renders the 'edit' template" do
        employee = FactoryGirl.create(:employee)
        put :update, {:id => 1, :employee => {:email=> 'user', :username=> 'user1', :first_name=>'F',:last_name=>'L', :id=>1, :password=>'12345678',:phone => 1234567898, :zipcode=>94704}}
        expect(response).to render_template("edit")
      end
    end
  end

end
